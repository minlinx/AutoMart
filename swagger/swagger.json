{
  "swagger": "2.0",
  "info": {
    "description": "Auto Mart is an online marketplace for automobiles of diverse makes, model or body type. With Auto Mart, users can sell their cars or buy from trusted dealerships or private sellers.",
    "version": "1.0.0",
    "title": "Auto Mart",
    "contact": {
      "email": "minaproblemsolver@gmail.com"
    }
  },
  "host": "minlinx.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Cars",
      "description": "All Cars Resources."
    },
    {
      "name": "Orders",
      "description": "All pieces of infomation about Users' Orders."
    },
    {
      "name": "Users",
      "description": "All pieces of infomation about Users."
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/car": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View all cars.",
        "description": "User(Admin) can view all car ADs.",
        "operationId": "getAllCars",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
    },
    "/car/status": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View all Available or Sold Cars.",
        "description": "",
        "operationId": "getCarsWithStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/car/bodyType": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View all vehicles with a specific body type.",
        "description": "",
        "operationId": "getCarsWithBodyType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bodyType",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/car/priceRange": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View all Available Cars within a price range.",
        "description": "",
        "operationId": "getCarsWithinAPriceRange",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/car/statusAndState": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View all Available Cars depending on their state and status.",
        "description": "",
        "operationId": "getCarsWithStatusAndState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/car/{carId}": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View a specific car.",
        "description": "",
        "operationId": "specificCar",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "carId",
            "in": "path",
            "required": true,
            "type": "number",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/car/": {
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Post a car sale advertisement.",
        "description": "",
        "operationId": "postCarAd",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Car sale advertisement successfully created"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/parcels/{parcelId}/destination": {
      "put": {
        "tags": [
          "parcel"
        ],
        "summary": "Cancel a parcel order that is not yet delivered",
        "description": "",
        "operationId": "updateParcelOrderById",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "parcelId",
            "in": "path",
            "description": "ID of Parcel to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "destination",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "destination": {
                  "type": "string",
                  "description": "The new destination"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "You are not authorized"
          },
          "404": {
            "description": "Parcel is not found"
          }
        }
      }
    },
    "/parcels/{parcelId}/presentLocation": {
      "put": {
        "tags": [
          "parcel"
        ],
        "summary": "Change the Present Location of a Parcel By Admin",
        "description": "",
        "operationId": "changePresentLocationByAdminById",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "parcelId",
            "in": "path",
            "description": "ID of Parcel to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "presentLocation",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {
                "presentLocation": {
                  "type": "string",
                  "description": "Present Location"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/parcels/{parcelId}/status": {
      "put": {
        "tags": [
          "parcel"
        ],
        "summary": "Change the Present Status of a Parcel By Admin",
        "description": "",
        "operationId": "changeStatusByAdminById",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string",
            "required": true
          },
          {
            "name": "parcelId",
            "in": "path",
            "description": "ID of Parcel to update Status",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "body",
            "description": "The Status of the parcel by the Admin",
            "required": true,
            "schema": {
              "properties": {
                "status": {
                  "type": "string",
                  "description": "The status of the parcel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create an account for a new user",
        "description": "",
        "operationId": "signUpUser",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "newUser",
            "in": "body",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "Already Used Credentials"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "signInUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/account/recovery": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Post user details for verification",
        "description": "",
        "operationId": "postUserDetailsForVerification",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "forgotUser",
            "in": "body",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/verifyUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully verified"
          },
          "400": {
            "description": "Account verification failed"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Change User Password",
        "description": "",
        "operationId": "changeUserPassword",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "changeUserPassword",
            "in": "body",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/changeUserPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully verified"
          },
          "400": {
            "description": "Account verification failed"
          }
        }
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "email of the user"
        },
        "password": {
          "type": "string",
          "description": "password of the user"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "Cars": {
      "properties": {
        "status": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "minPrice": {
          "type": "number"
        },
        "maxPrice": {
          "type": "number"
        },
        "manufacturer": {
          "type": "string"
        },
        "model": {
          "type": "number"
        },
        "carId": {
          "type": "number"
        },
        "bodyType": {
          "type": "string"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
